generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  walletAddress     String             @unique
  passwordHash      String
  credits           Int                @default(0)
  isAdmin           Boolean            @default(false)
  isTrusted         Boolean            @default(false)
  trustedAt         DateTime?
  trustedBy         String?
  lastReportedAt    DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  moderationActions ModerationAction[] @relation("ModeratorActions")
  moderationTargets ModerationAction[] @relation("ModerationTargets")
  pixelHistory      PixelHistory[]
  changedPixels     Pixel[]            @relation("PixelLastChangedBy")
  reports           Report[]
  transactions      Transaction[]
  trustedByUser     User?              @relation("TrustedApproval", fields: [trustedBy], references: [id])
  approvedUsers     User[]             @relation("TrustedApproval")

  @@index([walletAddress])
  @@map("users")
}

model Board {
  id                 String         @id @default(cuid())
  name               String
  width              Int
  height             Int
  startingPixelPrice Int            @default(100)
  priceMultiplier    Float          @default(1.2)
  isActive           Boolean        @default(true)
  isFrozen           Boolean        @default(false)
  endDate            DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  pixelHistory       PixelHistory[]
  pixels             Pixel[]

  @@index([isActive, isFrozen])
  @@map("boards")
}

model Pixel {
  id              String         @id @default(cuid())
  x               Int
  y               Int
  color           String
  currentPrice    Int
  timesChanged    Int            @default(0)
  isHidden        Boolean        @default(false)
  lastChangedAt   DateTime       @default(now())
  boardId         String
  lastChangedById String?
  pixelHistory    PixelHistory[]
  board           Board          @relation(fields: [boardId], references: [id], onDelete: Cascade)
  lastChangedBy   User?          @relation("PixelLastChangedBy", fields: [lastChangedById], references: [id])
  reports         Report[]

  @@unique([boardId, x, y])
  @@index([boardId, x, y])
  @@index([boardId, isHidden])
  @@map("pixels")
}

model PixelHistory {
  id        String   @id @default(cuid())
  x         Int
  y         Int
  color     String
  pricePaid Int
  timestamp DateTime @default(now())
  boardId   String
  userId    String
  pixelId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  pixel     Pixel    @relation(fields: [pixelId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([boardId, timestamp(sort: Desc)])
  @@index([userId, timestamp(sort: Desc)])
  @@map("pixel_history")
}

model Transaction {
  id         String            @id @default(cuid())
  type       TransactionType
  amount     Int
  dogeAmount Float?
  txHash     String?
  status     TransactionStatus @default(PENDING)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  userId     String
  user       User              @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model Report {
  id             String       @id @default(cuid())
  reason         String
  status         ReportStatus @default(PENDING)
  reviewedAt     DateTime?
  reviewedBy     String?
  moderatorNotes String?
  createdAt      DateTime     @default(now())
  pixelId        String
  reporterId     String
  pixel          Pixel        @relation(fields: [pixelId], references: [id], onDelete: Cascade)
  reporter       User         @relation(fields: [reporterId], references: [id])

  @@unique([pixelId, reporterId])
  @@index([status, createdAt(sort: Desc)])
  @@map("reports")
}

model ModerationAction {
  id             String               @id @default(cuid())
  actionType     ModerationActionType
  reason         String
  createdAt      DateTime             @default(now())
  boardId        String?
  fromX          Int?
  fromY          Int?
  toX            Int?
  toY            Int?
  affectedPixels Int?
  moderatorId    String
  targetUserId   String?
  moderator      User                 @relation("ModeratorActions", fields: [moderatorId], references: [id])
  targetUser     User?                @relation("ModerationTargets", fields: [targetUserId], references: [id])

  @@map("moderation_actions")
}

model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt

  @@map("settings")
}

enum TransactionType {
  CREDIT_PURCHASE
  PIXEL_PAINT
  PASSWORD_RECOVERY
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ReportStatus {
  PENDING
  APPROVED
  REJECTED
  AUTO_HIDDEN
}

enum ModerationActionType {
  TRUST_USER
  UNTRUST_USER
  CANVAS_RESET
  REVIEW_REPORT
  HIDE_PIXEL
  UNHIDE_PIXEL
}
